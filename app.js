// ‡¶∏‡¶¨ ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶ß‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
let lists = [];

// ‡¶®‡¶§‡ßÅ‡¶® ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
function addList() {
  const nameInput = document.getElementById("listNameInput");
  const listName = nameInput.value.trim();
  if (!listName) return alert("‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®");

  const newList = {
    id: Date.now(),
    name: listName,
    date: new Date().toLocaleDateString("bn-BD"),
    products: []
  };

  lists.push(newList);
  nameInput.value = "";
  renderLists();
  saveData();
}

// ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ
function renderLists() {
  const container = document.getElementById("listsContainer");
  container.innerHTML = "";

  let grandTotal = 0;

  lists.forEach(list => {
    let listTotal = list.products.reduce((sum, p) => sum + (p.price * p.qty), 0);
    grandTotal += listTotal;

    const listDiv = document.createElement("div");
    listDiv.className = "list";

    listDiv.innerHTML = `
      <h3>${list.name} <small>(${list.date})</small></h3>
      <div id="products-${list.id}">
        ${list.products.map(p => `
          <div>
            ${p.name} - ${p.qty} √ó ${p.price} = ${p.qty * p.price} ‡¶ü‡¶æ‡¶ï‡¶æ
            <button onclick="editProduct(${list.id}, ${p.id})">‚úèÔ∏è Edit</button>
            <button onclick="deleteProduct(${list.id}, ${p.id})">‚ùå Delete</button>
          </div>
        `).join("")}
      </div>
      <button onclick="addProduct(${list.id})">‚ûï ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®</button>
      <p><strong>‡¶Æ‡ßã‡¶ü: ${listTotal} ‡¶ü‡¶æ‡¶ï‡¶æ</strong></p>
      <hr>
    `;

    container.appendChild(listDiv);
  });

  if (lists.length > 0) {
    const totalDiv = document.createElement("h2");
    totalDiv.textContent = `‡¶∏‡¶∞‡ßç‡¶¨‡¶Æ‡ßã‡¶ü: ${grandTotal} ‡¶ü‡¶æ‡¶ï‡¶æ`;
    container.appendChild(totalDiv);
  }
}

// ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
function addProduct(listId) {
  const name = prompt("‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:");
  const qty = parseFloat(prompt("‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:"));
  const price = parseFloat(prompt("‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶á‡¶â‡¶®‡¶ø‡¶ü‡ßá‡¶∞ ‡¶¶‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:"));
  if (!name || isNaN(qty) || isNaN(price)) return;

  const list = lists.find(l => l.id === listId);
  list.products.push({ id: Date.now(), name, qty, price });
  renderLists();
  saveData();
}

// ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶è‡¶°‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ
function editProduct(listId, productId) {
  const list = lists.find(l => l.id === listId);
  const product = list.products.find(p => p.id === productId);

  const newName = prompt("‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡¶æ‡¶Æ:", product.name) || product.name;
  const newQty = parseFloat(prompt("‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£:", product.qty)) || product.qty;
  const newPrice = parseFloat(prompt("‡¶®‡¶§‡ßÅ‡¶® ‡¶¶‡¶æ‡¶Æ:", product.price)) || product.price;

  product.name = newName;
  product.qty = newQty;
  product.price = newPrice;

  renderLists();
  saveData();
}

// ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ
function deleteProduct(listId, productId) {
  const list = lists.find(l => l.id === listId);
  list.products = list.products.filter(p => p.id !== productId);
  renderLists();
  saveData();
}

// ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶Ü‡¶™ ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßã‡¶∞‡ßç‡¶ü
function exportBackup() {
  const dataStr = JSON.stringify(lists, null, 2);
  const blob = new Blob([dataStr], { type: "application/json" });
  const link = document.createElement("a");
  link.href = URL.createObjectURL(blob);
  link.download = "bazarlist_backup.json";
  link.click();
}

// ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶Ü‡¶™ ‡¶á‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡ßç‡¶ü
function importBackup(event) {
  const file = event.target.files[0];
  if (!file) return;
  const reader = new FileReader();
  reader.onload = e => {
    lists = JSON.parse(e.target.result);
    renderLists();
    saveData();
  };
  reader.readAsText(file);
}

// ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡ßá‡¶ú‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡ßá‡¶≠
function saveData() {
  localStorage.setItem("bazarLists", JSON.stringify(lists));
}

// ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡ßá‡¶ú ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶°
function loadData() {
  const saved = localStorage.getItem("bazarLists");
  if (saved) lists = JSON.parse(saved);
  renderLists();
}

// PDF ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°
function downloadPDF() {
  const { jsPDF } = window.jspdf;
  const doc = new jsPDF();
  let y = 20;

  doc.setFontSize(16);
  doc.text("üõí BazarList ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü", 20, y);
  y += 10;

  lists.forEach(list => {
    doc.setFontSize(14);
    doc.text(`${list.name} (${list.date})`, 20, y);
    y += 8;

    list.products.forEach(p => {
      doc.setFontSize(12);
      doc.text(`${p.name} - ${p.qty} √ó ${p.price} = ${p.qty * p.price} ‡¶ü‡¶æ‡¶ï‡¶æ`, 25, y);
      y += 7;
    });

    let listTotal = list.products.reduce((sum, p) => sum + (p.price * p.qty), 0);
    doc.text(`‡¶Æ‡ßã‡¶ü: ${listTotal} ‡¶ü‡¶æ‡¶ï‡¶æ`, 25, y);
    y += 12;
  });

  doc.save("BazarList.pdf");
}

// ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶§‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶π‡¶¨‡ßá
window.onload = loadData;